// Generated by gencpp from file board_detection/BoardState.msg
// DO NOT EDIT!


#ifndef BOARD_DETECTION_MESSAGE_BOARDSTATE_H
#define BOARD_DETECTION_MESSAGE_BOARDSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace board_detection
{
template <class ContainerAllocator>
struct BoardState_
{
  typedef BoardState_<ContainerAllocator> Type;

  BoardState_()
    : state()  {
    }
  BoardState_(const ContainerAllocator& _alloc)
    : state(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::board_detection::BoardState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::board_detection::BoardState_<ContainerAllocator> const> ConstPtr;

}; // struct BoardState_

typedef ::board_detection::BoardState_<std::allocator<void> > BoardState;

typedef boost::shared_ptr< ::board_detection::BoardState > BoardStatePtr;
typedef boost::shared_ptr< ::board_detection::BoardState const> BoardStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::board_detection::BoardState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::board_detection::BoardState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::board_detection::BoardState_<ContainerAllocator1> & lhs, const ::board_detection::BoardState_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::board_detection::BoardState_<ContainerAllocator1> & lhs, const ::board_detection::BoardState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace board_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::board_detection::BoardState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::board_detection::BoardState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::board_detection::BoardState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::board_detection::BoardState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::board_detection::BoardState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::board_detection::BoardState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::board_detection::BoardState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8790a1871dbb60376786a5453cc60ea1";
  }

  static const char* value(const ::board_detection::BoardState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8790a1871dbb6037ULL;
  static const uint64_t static_value2 = 0x6786a5453cc60ea1ULL;
};

template<class ContainerAllocator>
struct DataType< ::board_detection::BoardState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "board_detection/BoardState";
  }

  static const char* value(const ::board_detection::BoardState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::board_detection::BoardState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] state\n"
;
  }

  static const char* value(const ::board_detection::BoardState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::board_detection::BoardState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoardState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::board_detection::BoardState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::board_detection::BoardState_<ContainerAllocator>& v)
  {
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.state[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BOARD_DETECTION_MESSAGE_BOARDSTATE_H
