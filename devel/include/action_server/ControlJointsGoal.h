// Generated by gencpp from file action_server/ControlJointsGoal.msg
// DO NOT EDIT!


#ifndef ACTION_SERVER_MESSAGE_CONTROLJOINTSGOAL_H
#define ACTION_SERVER_MESSAGE_CONTROLJOINTSGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace action_server
{
template <class ContainerAllocator>
struct ControlJointsGoal_
{
  typedef ControlJointsGoal_<ContainerAllocator> Type;

  ControlJointsGoal_()
    : torso_lift(0.0)
    , arm_1(0.0)
    , arm_2(0.0)
    , arm_3(0.0)
    , arm_4(0.0)
    , arm_5(0.0)
    , arm_6(0.0)
    , arm_7(0.0)
    , gripper_position(0.0)  {
    }
  ControlJointsGoal_(const ContainerAllocator& _alloc)
    : torso_lift(0.0)
    , arm_1(0.0)
    , arm_2(0.0)
    , arm_3(0.0)
    , arm_4(0.0)
    , arm_5(0.0)
    , arm_6(0.0)
    , arm_7(0.0)
    , gripper_position(0.0)  {
  (void)_alloc;
    }



   typedef double _torso_lift_type;
  _torso_lift_type torso_lift;

   typedef double _arm_1_type;
  _arm_1_type arm_1;

   typedef double _arm_2_type;
  _arm_2_type arm_2;

   typedef double _arm_3_type;
  _arm_3_type arm_3;

   typedef double _arm_4_type;
  _arm_4_type arm_4;

   typedef double _arm_5_type;
  _arm_5_type arm_5;

   typedef double _arm_6_type;
  _arm_6_type arm_6;

   typedef double _arm_7_type;
  _arm_7_type arm_7;

   typedef double _gripper_position_type;
  _gripper_position_type gripper_position;





  typedef boost::shared_ptr< ::action_server::ControlJointsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_server::ControlJointsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ControlJointsGoal_

typedef ::action_server::ControlJointsGoal_<std::allocator<void> > ControlJointsGoal;

typedef boost::shared_ptr< ::action_server::ControlJointsGoal > ControlJointsGoalPtr;
typedef boost::shared_ptr< ::action_server::ControlJointsGoal const> ControlJointsGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::action_server::ControlJointsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::action_server::ControlJointsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::action_server::ControlJointsGoal_<ContainerAllocator1> & lhs, const ::action_server::ControlJointsGoal_<ContainerAllocator2> & rhs)
{
  return lhs.torso_lift == rhs.torso_lift &&
    lhs.arm_1 == rhs.arm_1 &&
    lhs.arm_2 == rhs.arm_2 &&
    lhs.arm_3 == rhs.arm_3 &&
    lhs.arm_4 == rhs.arm_4 &&
    lhs.arm_5 == rhs.arm_5 &&
    lhs.arm_6 == rhs.arm_6 &&
    lhs.arm_7 == rhs.arm_7 &&
    lhs.gripper_position == rhs.gripper_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::action_server::ControlJointsGoal_<ContainerAllocator1> & lhs, const ::action_server::ControlJointsGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace action_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::action_server::ControlJointsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_server::ControlJointsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_server::ControlJointsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_server::ControlJointsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_server::ControlJointsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_server::ControlJointsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::action_server::ControlJointsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "330b6114482d9def04dc8ca1d950eb95";
  }

  static const char* value(const ::action_server::ControlJointsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x330b6114482d9defULL;
  static const uint64_t static_value2 = 0x04dc8ca1d950eb95ULL;
};

template<class ContainerAllocator>
struct DataType< ::action_server::ControlJointsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "action_server/ControlJointsGoal";
  }

  static const char* value(const ::action_server::ControlJointsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::action_server::ControlJointsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Request part (Goal)\n"
"float64 torso_lift\n"
"float64 arm_1\n"
"float64 arm_2\n"
"float64 arm_3\n"
"float64 arm_4\n"
"float64 arm_5\n"
"float64 arm_6\n"
"float64 arm_7\n"
"float64 gripper_position  # 0.0 for open, 1.0 for close (or adjust as needed)\n"
"\n"
;
  }

  static const char* value(const ::action_server::ControlJointsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::action_server::ControlJointsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.torso_lift);
      stream.next(m.arm_1);
      stream.next(m.arm_2);
      stream.next(m.arm_3);
      stream.next(m.arm_4);
      stream.next(m.arm_5);
      stream.next(m.arm_6);
      stream.next(m.arm_7);
      stream.next(m.gripper_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlJointsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::action_server::ControlJointsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::action_server::ControlJointsGoal_<ContainerAllocator>& v)
  {
    s << indent << "torso_lift: ";
    Printer<double>::stream(s, indent + "  ", v.torso_lift);
    s << indent << "arm_1: ";
    Printer<double>::stream(s, indent + "  ", v.arm_1);
    s << indent << "arm_2: ";
    Printer<double>::stream(s, indent + "  ", v.arm_2);
    s << indent << "arm_3: ";
    Printer<double>::stream(s, indent + "  ", v.arm_3);
    s << indent << "arm_4: ";
    Printer<double>::stream(s, indent + "  ", v.arm_4);
    s << indent << "arm_5: ";
    Printer<double>::stream(s, indent + "  ", v.arm_5);
    s << indent << "arm_6: ";
    Printer<double>::stream(s, indent + "  ", v.arm_6);
    s << indent << "arm_7: ";
    Printer<double>::stream(s, indent + "  ", v.arm_7);
    s << indent << "gripper_position: ";
    Printer<double>::stream(s, indent + "  ", v.gripper_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTION_SERVER_MESSAGE_CONTROLJOINTSGOAL_H
